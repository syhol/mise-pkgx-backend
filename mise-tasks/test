#!/bin/bash
# Test runner script for mise-pkgx-backend
# Runs all unit tests and optionally integration tests

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

run_unit_tests() {
    header "Running Unit Tests"
    
    local failed=0
    
    # Test platform detection
    log "Running platform detection tests..."
    if lua test/test_platform_detection.lua; then
        log "‚úì Platform detection tests passed"
    else
        error "‚úó Platform detection tests failed"
        failed=1
    fi
    echo
    
    # Test version listing
    log "Running version listing tests..."
    if lua test/test_version_listing.lua; then
        log "‚úì Version listing tests passed"
    else
        error "‚úó Version listing tests failed"
        failed=1
    fi
    echo
    
    # Test exec environment
    log "Running exec environment tests..."
    if lua test/test_exec_env.lua; then
        log "‚úì Exec environment tests passed"
    else
        error "‚úó Exec environment tests failed"
        failed=1
    fi
    echo
    
    return $failed
}

run_integration_tests() {
    header "Running Integration Tests"
    
    if ! command -v mise &> /dev/null; then
        warn "mise not found, skipping integration tests"
        warn "To install mise: https://mise.jdx.dev/getting-started.html"
        return 0
    fi
    
    log "Running basic integration tests..."
    if ./test/test_basic_integration.sh; then
        log "‚úì Basic integration tests passed"
        return 0
    else
        error "‚úó Basic integration tests failed"
        return 1
    fi
}

main() {
    log "Starting test suite for mise-pkgx-backend..."
    echo
    
    local unit_failed=0
    local integration_failed=0
    
    # Run unit tests
    if ! run_unit_tests; then
        unit_failed=1
    fi
    
    # Run integration tests if requested and unit tests passed
    if [[ "$1" == "--with-integration" || "$1" == "-i" ]]; then
        if [[ $unit_failed -eq 0 ]]; then
            if ! run_integration_tests; then
                integration_failed=1
            fi
        else
            warn "Skipping integration tests due to unit test failures"
        fi
    else
        log "Skipping integration tests (use --with-integration to run them)"
    fi
    
    # Summary
    header "Test Summary"
    if [[ $unit_failed -eq 0 ]]; then
        log "‚úÖ Unit tests: PASSED"
    else
        error "‚ùå Unit tests: FAILED"
    fi
    
    if [[ "$1" == "--with-integration" || "$1" == "-i" ]]; then
        if [[ $integration_failed -eq 0 ]]; then
            log "‚úÖ Integration tests: PASSED"
        else
            error "‚ùå Integration tests: FAILED"
        fi
    fi
    
    # Exit with error if any tests failed
    if [[ $unit_failed -ne 0 || $integration_failed -ne 0 ]]; then
        exit 1
    fi
    
    log "üéâ All tests passed!"
}

# Show usage if help requested
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --with-integration, -i    Run integration tests (requires mise)"
    echo "  --help, -h               Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                       Run only unit tests"
    echo "  $0 --with-integration    Run unit and integration tests"
    exit 0
fi

main "$@"